import { expect, describe, it } from "vitest";
import DNAtoRNA from "../lib/dnaToRna";

describe("", function () {
  it("should be blah blah", function () {
    expect(DNAtoRNA("TTTT")).to.eql("UUUU");
    expect(DNAtoRNA("GCAT")).to.eql("GCAU");
    expect(DNAtoRNA("GACCGCCGCC")).to.eql("GACCGCCGCC");
    expect(DNAtoRNA("GATTCCACCGACTTCCCAAGTACCGGAAGCGCGACCAACTCGCACAGC")).to.eql("GAUUCCACCGACUUCCCAAGUACCGGAAGCGCGACCAACUCGCACAGC");
    expect(DNAtoRNA("CACGACATACGGAGCAGCGCACGGTTAGTACAGCTGTCGGTGAACTCCATGACA")).to.eql("CACGACAUACGGAGCAGCGCACGGUUAGUACAGCUGUCGGUGAACUCCAUGACA");
    expect(DNAtoRNA("CACGACATACGGAGCAGCGCACGGTTAGTACAGCTGTCGGTGAACTCCATGACA")).to.eql("CACGACAUACGGAGCAGCGCACGGUUAGUACAGCUGUCGGUGAACUCCAUGACA");
    expect(DNAtoRNA("AACCCTGTCCACCAGTAACGTAGGCCGACGGGAAAAATAAACGATCTGTCAATG")).to.eql("AACCCUGUCCACCAGUAACGUAGGCCGACGGGAAAAAUAAACGAUCUGUCAAUG");
    expect(DNAtoRNA("GAAGCTTATCCGTTCCTGAAGGCTGTGGCATCCTCTAAATCAGACTTGGCTACGCCGTTAGCCGAGGGCTTAGCGTTGAGTGTCATTATATACGCGGCCTGCGACCTGGCCACACAATGCCCTCGAAAATTTTTCTTTCGGTTATACGAGTTGCGAAACCTTTCGCGCGTAGACGAAGAATTTGAAGTGGCCTACACCGTTTGGAAAGCCGTTCTCATTAGAATGGTACCGACTACTCGGCTCGGAGTCATTGTATAGGGAGAGTGTCGTATCAACATCACACACTTTTAGCATTTAAGGTCCATGGCCGTTGACAGGTACCGA")).to.eql("GAAGCUUAUCCGUUCCUGAAGGCUGUGGCAUCCUCUAAAUCAGACUUGGCUACGCCGUUAGCCGAGGGCUUAGCGUUGAGUGUCAUUAUAUACGCGGCCUGCGACCUGGCCACACAAUGCCCUCGAAAAUUUUUCUUUCGGUUAUACGAGUUGCGAAACCUUUCGCGCGUAGACGAAGAAUUUGAAGUGGCCUACACCGUUUGGAAAGCCGUUCUCAUUAGAAUGGUACCGACUACUCGGCUCGGAGUCAUUGUAUAGGGAGAGUGUCGUAUCAACAUCACACACUUUUAGCAUUUAAGGUCCAUGGCCGUUGACAGGUACCGA");
  })
});

describe("Random tests", () => {

  const s = "ACGT"

  function randint(min, max){
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  for(let i = 0; i < 100; i++){
    let word = Array.from({length: randint(0, 20)}, (_, i) => s[randint(0, s.length - 1)]).join``
    let expected = word.replace(/T/g, "U")
    it(`sDNAtoRNA(${JSON.stringify(word)}) should equal ${JSON.stringify(expected)}`, () => {
      expect(DNAtoRNA(word)).to.eql(expected);
    });
  }
});
